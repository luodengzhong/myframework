<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brc.pa.projectdata.mapper.NodeTransactionMapper">
	<insert id="insert" parameterType="nodeTransaction">
		INSERT INTO PA_NODE_TRANSACTION(NODE_TRANSACTION_ID, TRANSACTION_DEFINE_ID, SEQUENCE, BIZ_KIND_ID, BIZ_ID, VERSION)
		VALUES(PA_ID_SEQ.nextval,${transactionDefineId}, ${sequence}, ${bizKindId}, ${bizId}, PA_VERSION_SEQ.nextval)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO PA_NODE_TRANSACTION(NODE_TRANSACTION_ID, TRANSACTION_DEFINE_ID, SEQUENCE, BIZ_KIND_ID, BIZ_ID, VERSION)
		SELECT
		PA_ID_SEQ.nextval,t.*,PA_VERSION_SEQ.nextval FROM (
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT ${item.transactionDefineId} as TRANSACTION_DEFINE_ID, ${item.sequence} as
			SEQUENCE, ${item.bizKindId} as BIZ_KIND_ID, ${item.bizId} as BIZ_ID FROM DUAL
		</foreach>
		) t
	</insert>


	<delete id="delete" parameterType="java.lang.Long">
		DELETE FROM PA_NODE_TRANSACTION WHERE NODE_TRANSACTION_ID = #{nodeTransactionId}
	</delete>

	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM PA_NODE_TRANSACTION WHERE NODE_TRANSACTION_ID IN
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="nodeTransaction">
		UPDATE PA_NODE_TRANSACTION
		<set>
			<if test="transactionDefineId != null">
				TRANSACTION_DEFINE_ID=${transactionDefineId},
			</if>
			<if test="sequence != null">
				SEQUENCE=${sequence},
			</if>
			<if test="bizKindId != null">
				BIZ_KIND_ID=${bizKindId},
			</if>
			<if test="bizId != null">
				BIZ_ID=${bizId},
			</if>
		</set>
		WHERE NODE_TRANSACTION_ID = #{nodeTransactionId}
	</update>

	<update id="updateSequence" parameterType="nodeTransaction">
		UPDATE PA_NODE_TRANSACTION SET SEQUENCE = #{sequence}
		WHERE NODE_TRANSACTION_ID = #{nodeTransactionId}
	</update>

	<select id="load" parameterType="java.lang.Long" resultType="nodeTransaction">
		SELECT NODE_TRANSACTION_ID as nodeTransactionId, TRANSACTION_DEFINE_ID as
		transactionDefineId, SEQUENCE as sequence, BIZ_KIND_ID as bizKindId, BIZ_ID as bizId,
		VERSION as version FROM PA_NODE_TRANSACTION WHERE
		NODE_TRANSACTION_ID=#{nodeTransactionId}
	</select>

	<select id="queryAll" parameterType="java.util.Map" resultType="nodeTransaction">
		SELECT t.NODE_TRANSACTION_ID as nodeTransactionId, t.TRANSACTION_DEFINE_ID as transactionDefineId, t.SEQUENCE as sequence, t.BIZ_KIND_ID as bizKindId,
		t.BIZ_ID as bizId, t.VERSION as version,c.NAME as name, c.TIME_LIMIT as timeLimit, c.DESCRIPTION as description
		FROM PA_NODE_TRANSACTION t,PA_TRANSACTION_DEFINE c WHERE t.TRANSACTION_DEFINE_ID = c.TRANSACTION_DEFINE_ID

		<if test="nodeTransactionId != null and nodeTransactionId > -1 ">
			AND t.NODE_TRANSACTION_ID = #{nodeTransactionId}
		</if>
		<if test="bizKindId != null and bizKindId > -1 ">
			AND t.BIZ_KIND_ID = #{bizKindId}
		</if>
		<if test="bizId != null and bizId > -1 ">
			AND t.BIZ_ID = #{bizId}
		</if>
		<if test="name != null">
			AND c.NAME like concat(concat('%',#{name}),'%')
		</if>
		ORDER BY NODE_TRANSACTION_ID ASC
	</select>

	<select id="slicedQuery" parameterType="java.util.Map" resultType="nodeTransaction">
		<!-- SELECT t.NODE_TRANSACTION_ID as nodeTransactionId, t.TRANSACTION_DEFINE_ID as transactionDefineId, t.SEQUENCE as sequence, t.BIZ_KIND_ID as bizKindId, t.BIZ_ID 
			as bizId, t.VERSION as version,c.NAME as name, c.TIME_LIMIT as timeLimit, c.DESCRIPTION as description FROM PA_NODE_TRANSACTION t,PA_TRANSACTION_DEFINE c ORDER BY 
			${sortname} ${sortorder} OFFSET (${page}-1)*${pagesize} ROWS FETCH NEXT ${pagesize} ROWS ONLY -->
		SELECT NODE_TRANSACTION_ID as nodeTransactionId, TRANSACTION_DEFINE_ID as transactionDefineId, SEQUENCE as sequence, BIZ_KIND_ID as bizKindId, BIZ_ID as
		bizId, VERSION as version,NAME as name, TIME_LIMIT as timeLimit, DESCRIPTION as description
		FROM (select t.NODE_TRANSACTION_ID, t.TRANSACTION_DEFINE_ID, t.SEQUENCE, t.BIZ_KIND_ID, t.BIZ_ID, t.VERSION,c.NAME, c.TIME_LIMIT, c.DESCRIPTION,ROWNUM RN FROM PA_NODE_TRANSACTION t,PA_TRANSACTION_DEFINE c
		WHERE t.TRANSACTION_DEFINE_ID = c.TRANSACTION_DEFINE_ID
		<if test="nodeTransactionId != null and nodeTransactionId > -1 ">
			AND t.NODE_TRANSACTION_ID = #{nodeTransactionId}
		</if>
		<if test="bizKindId != null and bizKindId > -1 ">
			AND t.BIZ_KIND_ID = #{bizKindId}
		</if>
		<if test="bizId != null and bizId > -1 ">
			AND t.BIZ_ID = #{bizId}
		</if>
		<if test="name != null">
			AND c.NAME like concat(concat('%',#{name}),'%')
		</if>
		ORDER BY ${sortname} ${sortorder}
		)
		WHERE RN > (${page}-1)*${pagesize} AND RN &lt;= ${page}*${pagesize}

	</select>

	<select id="getRecordCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT COUNT(0) FROM PA_NODE_TRANSACTION t,PA_TRANSACTION_DEFINE c
		WHERE t.TRANSACTION_DEFINE_ID = c.TRANSACTION_DEFINE_ID
		<if test="nodeTransactionId != null and nodeTransactionId > -1 ">
			AND t.NODE_TRANSACTION_ID != #{nodeTransactionId}
		</if>
		<if test="bizKindId != null and bizKindId > -1 ">
			AND t.BIZ_KIND_ID = #{bizKindId}
		</if>
		<if test="bizId != null and bizId > -1 ">
			AND t.BIZ_ID = #{bizId}
		</if>
		<if test="transactionDefineId != null and bizId > -1 ">
			AND t.TRANSACTION_DEFINE_ID = #{transactionDefineId}
		</if>
		<if test="name != null">
			AND c.NAME like concat(concat('%',#{name}),'%')
		</if>
	</select>

	<select id="getNextSequence" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT NVL(MAX(SEQUENCE),0) + 1 FROM PA_NODE_TRANSACTION WHERE BIZ_ID = #{bizId}
		AND BIZ_KIND_ID = #{bizKindId}
	</select>

</mapper>