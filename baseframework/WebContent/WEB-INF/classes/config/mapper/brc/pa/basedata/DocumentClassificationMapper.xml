<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brc.pa.basedata.mapper.DocumentClassificationMapper">
	<insert id="insert" parameterType="documentClassification">
		INSERT INTO PA_DOCUMENT_CLASSIFICATION(DOCUMENT_CLASSIFICATION_ID, NODE_KIND_ID, PARENT_ID, CODE, NAME, HAS_UPLOAD,
		DESCRIPTION, FULL_ID, SEQUENCE, VERSION)
		VALUES(PA_ID_SEQ.nextval,${nodeKindId}, ${parentId}, #{code, jdbcType=VARCHAR}, #{name, jdbcType=VARCHAR},
		${hasUpload}, #{description, jdbcType=VARCHAR},
		#{fullId, jdbcType=VARCHAR}||'/'||PA_ID_SEQ.nextval, ${sequence}, PA_VERSION_SEQ.nextval)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO PA_DOCUMENT_CLASSIFICATION(DOCUMENT_CLASSIFICATION_ID, NODE_KIND_ID, PARENT_ID, CODE, NAME, HAS_UPLOAD, DESCRIPTION, FULL_ID, SEQUENCE, VERSION)
		SELECT PA_ID_SEQ.nextval,t.*,PA_VERSION_SEQ.nextval FROM (
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT ${item.nodeKindId} as NODE_KIND_ID, ${item.parentId} as PARENT_ID, #{item.code,
			jdbcType=VARCHAR} as CODE, #{item.name, jdbcType=VARCHAR} as NAME,
			${item.hasUpload} as HAS_UPLOAD, #{item.description, jdbcType=VARCHAR} as DESCRIPTION,
			#{item.fullId, jdbcType=VARCHAR} as FULL_ID, ${item.sequence} as
			SEQUENCE FROM DUAL
		</foreach>
		) t
	</insert>


	<delete id="delete" parameterType="java.lang.Long">
		DELETE FROM PA_DOCUMENT_CLASSIFICATION WHERE DOCUMENT_CLASSIFICATION_ID = #{documentClassificationId}
	</delete>

	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM PA_DOCUMENT_CLASSIFICATION WHERE DOCUMENT_CLASSIFICATION_ID IN
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="documentClassification">
		UPDATE PA_DOCUMENT_CLASSIFICATION
		<set>
			<if test="nodeKindId != null">
				NODE_KIND_ID=${nodeKindId},
			</if>
			<if test="parentId != null">
				PARENT_ID=${parentId},
			</if>
			<if test="code != null">
				CODE=#{code, jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				NAME=#{name, jdbcType=VARCHAR},
			</if>
			<if test="hasUpload != null">
				HAS_UPLOAD=${hasUpload},
			</if>
			<if test="description != null">
				DESCRIPTION=#{description, jdbcType=VARCHAR},
			</if>
			<if test="fullId != null">
				FULL_ID=#{fullId, jdbcType=VARCHAR},
			</if>
			<if test="sequence != null">
				SEQUENCE=${sequence},
			</if>
		</set>
		WHERE DOCUMENT_CLASSIFICATION_ID = #{documentClassificationId}
	</update>

	<update id="updateSequence" parameterType="documentClassification">
		UPDATE PA_DOCUMENT_CLASSIFICATION SET SEQUENCE = #{sequence}
		WHERE DOCUMENT_CLASSIFICATION_ID =
		#{documentClassificationId}
	</update>

	<update id="move" parameterType="java.util.Map">
		UPDATE PA_DOCUMENT_CLASSIFICATION SET PARENT_ID = ${parentId},FULL_ID = #{fullId} WHERE DOCUMENT_CLASSIFICATION_ID =
		#{documentClassificationId}
	</update>

	<select id="load" parameterType="java.lang.Long" resultType="documentClassification">
		SELECT DOCUMENT_CLASSIFICATION_ID as documentClassificationId, NODE_KIND_ID as nodeKindId,
		PARENT_ID as parentId, CODE as code, NAME as name, HAS_UPLOAD as
		hasUpload, DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence, VERSION as
		version FROM PA_DOCUMENT_CLASSIFICATION WHERE
		DOCUMENT_CLASSIFICATION_ID=#{documentClassificationId}
	</select>

	<select id="queryAll" parameterType="java.util.Map" resultType="documentClassification">
		SELECT DOCUMENT_CLASSIFICATION_ID as documentClassificationId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, HAS_UPLOAD as
		hasUpload, DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence, VERSION as version FROM PA_DOCUMENT_CLASSIFICATION
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%',#{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%',#{name}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY SEQUENCE ASC
	</select>

	<select id="slicedQuery" parameterType="java.util.Map" resultType="documentClassification">
		<!-- SELECT DOCUMENT_CLASSIFICATION_ID as documentClassificationId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, HAS_UPLOAD as 
			hasUpload, DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence, VERSION as version FROM PA_DOCUMENT_CLASSIFICATION ORDER BY ${sortname} ${sortorder} 
			OFFSET (${page}-1)*${pagesize} ROWS FETCH NEXT ${pagesize} ROWS ONLY -->
		SELECT DOCUMENT_CLASSIFICATION_ID as documentClassificationId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, HAS_UPLOAD as
		hasUpload, DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence, VERSION as version FROM (select t.DOCUMENT_CLASSIFICATION_ID, t.NODE_KIND_ID,
		t.PARENT_ID, t.CODE, t.NAME, t.HAS_UPLOAD, t.DESCRIPTION, t.FULL_ID, t.SEQUENCE, t.VERSION,ROWNUM RN FROM PA_DOCUMENT_CLASSIFICATION t
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%',#{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%',#{name}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY ${sortname} ${sortorder}
		)
		WHERE RN > (${page}-1)*${pagesize} AND RN &lt;= ${page}*${pagesize}
	</select>

	<select id="getRecordCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT COUNT(0) FROM PA_DOCUMENT_CLASSIFICATION
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%',#{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%',#{name}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
			<if test="fullCode != null">
				AND CODE = #{fullCode}
			</if>
			<if test="documentClassificationId != null and documentClassificationId > 0">
				AND DOCUMENT_CLASSIFICATION_ID != #{documentClassificationId}
			</if>
		</where>
	</select>

	<select id="getNextSequence" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT NVL(MAX(SEQUENCE),0) + 1 FROM PA_DOCUMENT_CLASSIFICATION WHERE PARENT_ID =
		#{parentId}
	</select>

</mapper>