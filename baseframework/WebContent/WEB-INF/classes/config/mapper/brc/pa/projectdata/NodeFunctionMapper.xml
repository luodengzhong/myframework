<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brc.pa.projectdata.mapper.NodeFunctionMapper">

	<insert id="insert" parameterType="nodeFunction">
		<selectKey order="BEFORE" keyProperty="nodeFunctionId" resultType="java.lang.Long">
			SELECT PA_ID_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO PA_NODE_FUNCTION(NODE_FUNCTION_ID, FUNCTION_DEFINE_ID, SEQUENCE, BIZ_KIND_ID, BIZ_ID,NOTICE_TYPE_ID ,VERSION)
		VALUES(${nodeFunctionId},${functionDefineId},
		${sequence}, ${bizKindId}, ${bizId},${noticeTypeId},PA_VERSION_SEQ.nextval)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO PA_NODE_FUNCTION(NODE_FUNCTION_ID, FUNCTION_DEFINE_ID, SEQUENCE, BIZ_KIND_ID, BIZ_ID, NOTICE_TYPE_ID,VERSION)
		SELECT PA_ID_SEQ.nextval,t.*,PA_VERSION_SEQ.nextval
		FROM (
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT ${item.functionDefineId} as FUNCTION_DEFINE_ID, ${item.sequence} as SEQUENCE,
			${item.bizKindId} as BIZ_KIND_ID, ${item.bizId} as BIZ_ID,${item.noticeTypeId} FROM DUAL
		</foreach>
		) t
	</insert>


	<delete id="delete" parameterType="java.lang.Long">
		DELETE FROM PA_NODE_FUNCTION WHERE NODE_FUNCTION_ID = #{nodeFunctionId}
	</delete>

	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM PA_NODE_FUNCTION WHERE NODE_FUNCTION_ID IN
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="nodeFunction">
		UPDATE PA_NODE_FUNCTION
		<set>
			<if test="functionDefineId != null">
				FUNCTION_DEFINE_ID=${functionDefineId},
			</if>
			<if test="sequence != null">
				SEQUENCE=${sequence},
			</if>
			<if test="bizKindId != null">
				BIZ_KIND_ID=${bizKindId},
			</if>
			<if test="bizId != null">
				BIZ_ID=${bizId},
			</if>
		</set>
		WHERE NODE_FUNCTION_ID = #{nodeFunctionId}
	</update>

	<update id="updateSequence" parameterType="nodeFunction">
		UPDATE
		PA_NODE_FUNCTION SET SEQUENCE = #{sequence}
		WHERE NODE_FUNCTION_ID =
		#{nodeFunctionId}
	</update>

	<update id="updateExecutionNode" parameterType="nodeFunction">
		UPDATE PA_NODE_FUNCTION SET NOTICE_TYPE_ID = ${noticeTypeId} WHERE NODE_FUNCTION_ID =
		${nodeFunctionId}
	</update>

	<select id="load" parameterType="java.lang.Long" resultType="nodeFunction">
		SELECT NODE_FUNCTION_ID as nodeFunctionId, FUNCTION_DEFINE_ID as
		functionDefineId, SEQUENCE
		as sequence, BIZ_KIND_ID as bizKindId,
		BIZ_ID as bizId,NOTICE_TYPE_ID as noticeTypeId, VERSION as version FROM PA_NODE_FUNCTION WHERE
		NODE_FUNCTION_ID=#{nodeFunctionId}
	</select>

	<select id="queryAll" parameterType="java.util.Map" resultType="nodeFunction">
		SELECT t.NODE_FUNCTION_ID as nodeFunctionId, t.FUNCTION_DEFINE_ID as
		functionDefineId, t.SEQUENCE as sequence, t.BIZ_KIND_ID as bizKindId,
		t.BIZ_ID as bizId,NOTICE_TYPE_ID as noticeTypeId,
		t.VERSION as
		version,t1.KIND_ID as kindId FROM
		PA_NODE_FUNCTION t,PA_FUNCTION_DEFINE t1
		<where>
			t.function_define_id=t1.function_define_id
			<if test="functionDefineId != null and functionDefineId > -1 ">
				AND t.FUNCTION_DEFINE_ID = #{functionDefineId}
			</if>
			<if test="bizKindId != null and bizKindId > -1 ">
				AND t.BIZ_KIND_ID = #{bizKindId}
			</if>
			<if test="bizId != null and bizId > -1 ">
				AND t.BIZ_ID = #{bizId}
			</if>
			<if test="kindId != null and kindId > -1 ">
				AND t1.KIND_ID = #{kindId}
			</if>
			<if test="isSysFunId != null and isSysFunId == 1 ">
				AND t1.SYS_FUN_ID > 0
			</if>
		</where>
		ORDER BY NODE_FUNCTION_ID ASC
	</select>

	<select id="slicedQuery" parameterType="java.util.Map" resultType="nodeFunction">
		<!-- SELECT t.NODE_FUNCTION_ID as nodeFunctionId, t.FUNCTION_DEFINE_ID as functionDefineId, t.SEQUENCE as sequence, t.BIZ_KIND_ID as bizKindId, t.BIZ_ID as bizId, 
			t.VERSION as version, c.CODE as code, c.NAME as name FROM PA_NODE_FUNCTION t ORDER BY ${sortname} ${sortorder} OFFSET (${page}-1)*${pagesize} ROWS FETCH NEXT ${pagesize} 
			ROWS ONLY -->
		SELECT NODE_FUNCTION_ID as nodeFunctionId, FUNCTION_DEFINE_ID as functionDefineId, SEQUENCE as sequence, BIZ_KIND_ID as bizKindId,NOTICE_TYPE_ID as noticeTypeId , BIZ_ID as bizId,VERSION as
		version,CODE as code, NAME as name FROM (select t.NODE_FUNCTION_ID, t.FUNCTION_DEFINE_ID, t.SEQUENCE, t.BIZ_KIND_ID, t.NOTICE_TYPE_ID,t.BIZ_ID,t.VERSION,c.CODE, c.NAME,ROWNUM RN FROM PA_NODE_FUNCTION t, PA_FUNCTION_DEFINE c
		where t.FUNCTION_DEFINE_ID = c.FUNCTION_DEFINE_ID
		<if test="functionDefineId != null and functionDefineId > -1 ">
			AND t.FUNCTION_DEFINE_ID = #{functionDefineId}
		</if>
		<if test="bizKindId != null and bizKindId > -1 ">
			AND t.BIZ_KIND_ID = #{bizKindId}
		</if>
		<if test="bizId != null and bizId > -1 ">
			AND t.BIZ_ID = #{bizId}
		</if>
		<if test="code != null">
			AND c.CODE like concat(concat('%',#{code}),'%')
		</if>
		<if test="name != null">
			AND c.NAME like concat(concat('%',#{name}),'%')
		</if>
		ORDER BY ${sortname} ${sortorder}
		)
		WHERE RN > (${page}-1)*${pagesize} AND RN &lt;= ${page}*${pagesize}

	</select>

	<select id="getRecordCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT COUNT(0) FROM
		PA_NODE_FUNCTION t, PA_FUNCTION_DEFINE c
		<where>
			t.FUNCTION_DEFINE_ID = c.FUNCTION_DEFINE_ID
			<if test="functionDefineId != null and functionDefineId > -1 ">
				AND t.FUNCTION_DEFINE_ID = #{functionDefineId}
			</if>
			<if test="bizKindId != null and bizKindId > -1 ">
				AND t.BIZ_KIND_ID = #{bizKindId}
			</if>
			<if test="bizId != null and bizId > -1 ">
				AND t.BIZ_ID = #{bizId}
			</if>
			<if test="code != null">
				AND c.CODE like concat(concat('%',#{code}),'%')
			</if>
			<if test="name != null">
				AND c.NAME like concat(concat('%',#{name}),'%')
			</if>
		</where>
	</select>

	<select id="getNextSequence" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT NVL(MAX(SEQUENCE),0) + 1 FROM PA_NODE_FUNCTION WHERE
		BIZ_ID = #{bizId} AND
		BIZ_KIND_ID = ${bizKindId}
	</select>

</mapper>