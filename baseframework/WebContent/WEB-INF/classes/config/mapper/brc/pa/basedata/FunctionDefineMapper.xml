<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brc.pa.basedata.mapper.FunctionDefineMapper">
	<insert id="insert" parameterType="functionDefine">
		INSERT INTO PA_FUNCTION_DEFINE(FUNCTION_DEFINE_ID, NODE_KIND_ID, PARENT_ID, CODE, NAME, ICON_URL, KIND_ID,
		PARAMETER_VALUE, FULL_ID, DESCRIPTION,PROC_KEY,SERVICE_NAME, SEQUENCE,SYS_FUN_ID,SYS_FUN_NAME, VERSION)
		VALUES(PA_ID_SEQ.nextval,${nodeKindId}, ${parentId}, #{code,
		jdbcType=VARCHAR}, #{name, jdbcType=VARCHAR}, #{iconUrl, jdbcType=VARCHAR}, ${kindId},
		#{parameterValue, jdbcType=VARCHAR}, #{fullId,
		jdbcType=VARCHAR}||'/'||PA_ID_SEQ.nextval, #{description, jdbcType=VARCHAR},#{procKey, jdbcType=VARCHAR} ,#{serviceName, jdbcType=VARCHAR},${sequence}, ${sysFunId},#{sysFunName, jdbcType=VARCHAR}, PA_VERSION_SEQ.nextval)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO PA_FUNCTION_DEFINE(FUNCTION_DEFINE_ID, NODE_KIND_ID, PARENT_ID, CODE, NAME, ICON_URL, KIND_ID, PARAMETER_VALUE, FULL_ID, DESCRIPTION,PROC_KEY ,SERIVCE_NAME,SEQUENCE,
		VERSION)
		SELECT PA_ID_SEQ.nextval,t.*,PA_VERSION_SEQ.nextval FROM (
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT ${item.nodeKindId} as NODE_KIND_ID, ${item.parentId} as PARENT_ID, #{item.code,
			jdbcType=VARCHAR} as CODE, #{item.name, jdbcType=VARCHAR} as NAME,
			#{item.iconUrl, jdbcType=VARCHAR} as ICON_URL, ${item.kindId} as KIND_ID,
			#{item.parameterValue, jdbcType=VARCHAR} as PARAMETER_VALUE, #{item.fullId,
			jdbcType=VARCHAR} as FULL_ID, #{item.description, jdbcType=VARCHAR} as
			DESCRIPTION,${procKey} as PROC_KEY,${serviceName} as SERVICE_NAME ,${item.sequence} as SEQUENCE,${item.sysFunId} as SYS_FUN_ID,#{item.sysFunName} as SYS_FUN_NAME, FROM DUAL
		</foreach>
		) t
	</insert>


	<delete id="delete" parameterType="java.lang.Long">
		DELETE FROM PA_FUNCTION_DEFINE WHERE FUNCTION_DEFINE_ID = #{functionDefineId}
	</delete>

	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM PA_FUNCTION_DEFINE WHERE FUNCTION_DEFINE_ID IN
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="functionDefine">
		UPDATE PA_FUNCTION_DEFINE
		<set>
			<if test="nodeKindId != null">
				NODE_KIND_ID=${nodeKindId},
			</if>
			<if test="parentId != null">
				PARENT_ID=${parentId},
			</if>
			<if test="code != null">
				CODE=#{code, jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				NAME=#{name, jdbcType=VARCHAR},
			</if>
			<if test="iconUrl != null">
				ICON_URL=#{iconUrl, jdbcType=VARCHAR},
			</if>
			<if test="kindId != null">
				KIND_ID=${kindId},
			</if>
			<if test="parameterValue != null">
				PARAMETER_VALUE=#{parameterValue, jdbcType=VARCHAR},
			</if>
			<if test="procKey != null">
				PROC_KEY = #{procKey},
			</if>
			<if test="serviceName != null">
				SERVICE_NAME = #{serviceName},
			</if>
			<if test="fullId != null">
				FULL_ID=#{fullId, jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				DESCRIPTION=#{description, jdbcType=VARCHAR},
			</if>
			<if test="sequence != null">
				SEQUENCE=${sequence},
			</if>
			<if test="sysFunId != null and sysFunId > -1">
				SYS_FUN_ID=${sysFunId},
			</if>
			<if test="sysFunName != null">
				SYS_FUN_NAME=#{sysFunName, jdbcType=VARCHAR},
			</if>
		</set>
		WHERE FUNCTION_DEFINE_ID = #{functionDefineId}
	</update>

	<update id="updateSequence" parameterType="functionDefine">
		UPDATE PA_FUNCTION_DEFINE SET SEQUENCE = #{sequence} WHERE FUNCTION_DEFINE_ID = #{functionDefineId}
	</update>

	<update id="move" parameterType="fileTemplate">
		update PA_FUNCTION_DEFINE set PARENT_ID = ${parentId},FULL_ID = #{fullId} where FUNCTION_DEFINE_ID=${functionDefineId}
	</update>

	<select id="load" parameterType="java.lang.Long" resultType="functionDefine">
		SELECT FUNCTION_DEFINE_ID as functionDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as
		parentId, CODE as code, NAME as name, ICON_URL as iconUrl, KIND_ID as
		kindId, PARAMETER_VALUE as parameterValue,FULL_ID as fullId, DESCRIPTION as description,PROC_KEY as procKey,SERVICE_NAME as serviceName,
		SEQUENCE as sequence,SYS_FUN_ID as sysFunId,SYS_FUN_NAME as sysFunName, VERSION as version FROM PA_FUNCTION_DEFINE
		WHERE FUNCTION_DEFINE_ID=#{functionDefineId}
	</select>

	<select id="queryAll" parameterType="java.util.Map" resultType="functionDefine">
		SELECT FUNCTION_DEFINE_ID as functionDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, ICON_URL as iconUrl, KIND_ID as
		kindId, PARAMETER_VALUE as parameterValue, FULL_ID as fullId, DESCRIPTION as description,PROC_KEY as procKey,SERVICE_NAME as serviceName, SEQUENCE as sequence,SYS_FUN_ID as sysFunId,SYS_FUN_NAME as
		sysFunName, VERSION as version FROM PA_FUNCTION_DEFINE
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%', #{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%', #{name}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY SEQUENCE ASC
	</select>

	<select id="slicedQuery" parameterType="java.util.Map" resultType="functionDefine">
		<!-- SELECT FUNCTION_DEFINE_ID as functionDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, ICON_URL as iconUrl, KIND_ID 
			as kindId, PARAMETER_VALUE as parameterValue, FULL_ID as fullId, DESCRIPTION as description, SEQUENCE as sequence,SYS_FUN_ID as sysFunId,SYS_FUN_NAME as sysFunName, 
			VERSION as version FROM PA_FUNCTION_DEFINE ORDER BY ${sortname} ${sortorder} OFFSET (${page}-1)*${pagesize} ROWS FETCH NEXT ${pagesize} ROWS ONLY -->
		SELECT FUNCTION_DEFINE_ID as functionDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, ICON_URL as iconUrl, KIND_ID as
		kindId, PARAMETER_VALUE as parameterValue, FULL_ID as fullId, DESCRIPTION as description,PROC_KEY as procKey,SERVICE_NAME as serviceName, SEQUENCE as sequence, VERSION as version, SYS_FUN_ID as sysFunId,
		SYS_FUN_NAME as sysFunName FROM (select t.FUNCTION_DEFINE_ID, t.NODE_KIND_ID, t.PARENT_ID, t.CODE, t.NAME, t.ICON_URL, t.KIND_ID, t.PARAMETER_VALUE, t.FULL_ID, t.DESCRIPTION,t.PROC_KEY,t.SERVICE_NAME, t.SEQUENCE, t.VERSION, t.SYS_FUN_ID, t.SYS_FUN_NAME,ROWNUM RN FROM PA_FUNCTION_DEFINE t
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%', #{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%', #{name}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY ${sortname} ${sortorder}
		)
		WHERE RN > (${page}-1)*${pagesize} AND RN &lt;= ${page}*${pagesize}

	</select>

	<select id="getRecordCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT COUNT(0) FROM PA_FUNCTION_DEFINE
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%', #{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%', #{name}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
			<if test="fullCode != null">
				AND CODE = #{fullCode}
			</if>
			<if test="functionDefineId != null and functionDefineId > 0">
				AND FUNCTION_DEFINE_ID != #{functionDefineId}
			</if>
		</where>
	</select>

	<select id="getNextSequence" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT NVL(MAX(SEQUENCE),0) + 1 FROM PA_FUNCTION_DEFINE WHERE PARENT_ID =
		#{parentId}
	</select>

</mapper>