<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brc.pa.projectdata.mapper.ProjectTemplateMapper">
	<insert id="insert" parameterType="projectTemplate">
		INSERT INTO PA_PROJECT_TEMPLATE(PROJECT_TEMPLATE_ID, CODE, NAME, DESCRIPTION, SEQUENCE, NODE_KIND_ID, PARENT_ID,
		FULL_ID,VERSION)
		VALUES(PA_ID_SEQ.nextval,#{code, jdbcType=VARCHAR}, #{name, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, ${sequence}, ${nodeKindId},
		${parentId},
		#{fullId,jdbcType=VARCHAR}||'/'||PA_ID_SEQ.nextval, PA_VERSION_SEQ.nextval)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO PA_PROJECT_TEMPLATE(PROJECT_TEMPLATE_ID, CODE, NAME, DESCRIPTION, SEQUENCE, NODE_KIND_ID, PARENT_ID, FULL_ID, VERSION)
		SELECT
		PA_ID_SEQ.nextval,t.CODE, t.NAME, t.DESCRIPTION, t.SEQUENCE, t.NODE_KIND_ID, t.PARENT_ID, t.FULL_ID||'/'||PA_ID_SEQ.nextval, PA_VERSION_SEQ.nextval FROM (
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT #{item.code, jdbcType=VARCHAR} as CODE, #{item.name, jdbcType=VARCHAR} as NAME,
			#{item.description, jdbcType=VARCHAR} as DESCRIPTION, ${item.sequence} as
			SEQUENCE, ${item.nodeKindId} as NODE_KIND_ID, ${item.parentId} as PARENT_ID,
			${item.fullId}
			as FULL_ID FROM DUAL
		</foreach>
		) t
	</insert>


	<delete id="delete" parameterType="java.lang.Long">
		DELETE FROM PA_PROJECT_TEMPLATE WHERE PROJECT_TEMPLATE_ID = #{projectTemplateId}
	</delete>

	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM PA_PROJECT_TEMPLATE WHERE PROJECT_TEMPLATE_ID IN
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="projectTemplate">
		UPDATE PA_PROJECT_TEMPLATE
		<set>
			<if test="code != null">
				CODE=#{code, jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				NAME=#{name, jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				DESCRIPTION=#{description, jdbcType=VARCHAR},
			</if>
			<if test="sequence != null">
				SEQUENCE=${sequence},
			</if>
			<if test="nodeKindId != null">
				NODE_KIND_ID=${nodeKindId},
			</if>
			<if test="parentId != null">
				PARENT_ID=${parentId},
			</if>
			<if test="fullId != null">
				FULL_ID=#{fullId, jdbcType=VARCHAR},
			</if>
		</set>
		WHERE PROJECT_TEMPLATE_ID = #{projectTemplateId}
	</update>

	<update id="updateSequence" parameterType="projectTemplate">
		UPDATE PA_PROJECT_TEMPLATE SET SEQUENCE = #{sequence}
		WHERE PROJECT_TEMPLATE_ID = #{projectTemplateId}
	</update>

	<update id="move" parameterType="java.util.Map">
		UPDATE PA_PROJECT_TEMPLATE SET PARENT_ID = ${parentId},FULL_ID = #{fullId} WHERE
		PROJECT_TEMPLATE_ID=#{projectTemplateId}
	</update>

	<select id="load" parameterType="java.lang.Long" resultType="projectTemplate">
		SELECT PROJECT_TEMPLATE_ID as projectTemplateId, CODE as code, NAME as name, DESCRIPTION as
		description, SEQUENCE as sequence, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, FULL_ID as fullId, VERSION as version FROM
		PA_PROJECT_TEMPLATE WHERE
		PROJECT_TEMPLATE_ID=#{projectTemplateId}
	</select>

	<select id="queryAll" parameterType="java.util.Map" resultType="projectTemplate">
		SELECT PROJECT_TEMPLATE_ID as projectTemplateId, CODE as code, NAME as name, DESCRIPTION as description, SEQUENCE as sequence, NODE_KIND_ID as nodeKindId,
		PARENT_ID as
		parentId, FULL_ID as fullId, VERSION as version
		FROM PA_PROJECT_TEMPLATE
		<where>
			<if test="code != null">
				AND CODE like concat(concat('%', #{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%', #{name}),'%')
			</if>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY SEQUENCE ASC
	</select>

	<select id="slicedQuery" parameterType="java.util.Map" resultType="projectTemplate">
		<!-- SELECT PROJECT_TEMPLATE_ID as projectTemplateId, CODE as code, NAME as name, DESCRIPTION as description, SEQUENCE as sequence, NODE_KIND_ID as nodeKindId, 
			PARENT_ID as parentId, FULL_ID as fullId, VERSION as version FROM PA_PROJECT_TEMPLATE <where> <if test="code != null"> AND CODE like concat(concat('%', #{code}),'%') 
			</if> <if test="name != null"> AND NAME like concat(concat('%', #{name}),'%') </if> <if test="nodeKindId != null and nodeKindId > -1 "> AND NODE_KIND_ID = #{nodeKindId} 
			</if> <if test="parentId != null and parentId > -1 "> AND PARENT_ID = #{parentId} </if> <if test="fullId != null"> AND FULL_ID like concat(#{fullId},'%') </if> </where> 
			ORDER BY ${sortname} ${sortorder} OFFSET (${page}-1)*${pagesize} ROWS FETCH NEXT ${pagesize} ROWS ONLY -->
		SELECT PROJECT_TEMPLATE_ID as projectTemplateId, CODE as code, NAME as name, DESCRIPTION as description, SEQUENCE as sequence, VERSION as version,
		NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, FULL_ID as fullId FROM (select t.PROJECT_TEMPLATE_ID, t.CODE, t.NAME, t.DESCRIPTION, t.SEQUENCE, t.VERSION, t.NODE_KIND_ID, t.PARENT_ID, t.FULL_ID,ROWNUM RN FROM PA_PROJECT_TEMPLATE t
		<where>
			<if test="code != null">
				AND CODE like concat(concat('%', #{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%', #{name}),'%')
			</if>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY ${sortname} ${sortorder}
		)
		WHERE RN > (${page}-1)*${pagesize} AND RN &lt;= ${page}*${pagesize}

	</select>

	<select id="getRecordCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT COUNT(0) FROM PA_PROJECT_TEMPLATE
		<where>
			<if test="code != null">
				AND CODE like concat(concat('%', #{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%', #{name}),'%')
			</if>
			<if test="fullCode != null">
				AND CODE = #{fullCode}
			</if>
			<if test="projectTemplateId != null and projectTemplateId > 0">
				AND PROJECT_TEMPLATE_ID != #{projectTemplateId}
			</if>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
	</select>

	<select id="getNextSequence" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT NVL(MAX(SEQUENCE),0) + 1 FROM PA_PROJECT_TEMPLATE WHERE PARENT_ID =
		#{parentId}
	</select>

</mapper>