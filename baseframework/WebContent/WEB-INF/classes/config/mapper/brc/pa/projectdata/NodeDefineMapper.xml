<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brc.pa.projectdata.mapper.NodeDefineMapper">
	<insert id="insert" parameterType="nodeDefine">
		INSERT INTO PA_NODE_DEFINE(NODE_DEFINE_ID, NODE_KIND_ID, PARENT_ID, CODE, NAME, SHORT_NAME, ICON_URL, START_MODE,
		EXECUTION_NUM, TIME_LIMIT, DESCRIPTION, FULL_ID,
		SEQUENCE, VERSION)
		VALUES(PA_ID_SEQ.nextval,${nodeKindId}, ${parentId}, #{code, jdbcType=VARCHAR}, #{name,
		jdbcType=VARCHAR}, #{shortName, jdbcType=VARCHAR}, #{iconUrl, jdbcType=VARCHAR}, ${startMode},
		${executionNum}, ${timeLimit}, #{description, jdbcType=VARCHAR},
		#{fullId, jdbcType=VARCHAR}||'/'||PA_ID_SEQ.nextval, ${sequence}, PA_VERSION_SEQ.nextval)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO PA_NODE_DEFINE(NODE_DEFINE_ID, NODE_KIND_ID, PARENT_ID, CODE, NAME, SHORT_NAME, ICON_URL, START_MODE, EXECUTION_NUM, TIME_LIMIT, DESCRIPTION,
		FULL_ID, SEQUENCE, VERSION)
		SELECT PA_ID_SEQ.nextval,t.*,PA_VERSION_SEQ.nextval FROM (
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT ${item.nodeKindId} as NODE_KIND_ID, ${item.parentId} as PARENT_ID, #{item.code,
			jdbcType=VARCHAR} as CODE, #{item.name, jdbcType=VARCHAR} as NAME,
			#{item.shortName, jdbcType=VARCHAR} as SHORT_NAME, #{item.iconUrl, jdbcType=VARCHAR} as
			ICON_URL, ${item.startMode} as START_MODE, ${item.executionNum} as
			EXECUTION_NUM, ${item.timeLimit} as TIME_LIMIT, #{item.description, jdbcType=VARCHAR} as
			DESCRIPTION, #{item.fullId, jdbcType=VARCHAR} as FULL_ID,
			${item.sequence} as SEQUENCE FROM DUAL
		</foreach>
		) t
	</insert>


	<delete id="delete" parameterType="java.lang.Long" statementType="CALLABLE">
		{call p_pa_delete_node_define(#{nodeDefineId})}
	</delete>

	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM PA_NODE_DEFINE WHERE NODE_DEFINE_ID IN
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="nodeDefine">
		UPDATE PA_NODE_DEFINE
		<set>
			<if test="nodeKindId != null">
				NODE_KIND_ID=${nodeKindId},
			</if>
			<if test="parentId != null">
				PARENT_ID=${parentId},
			</if>
			<if test="code != null">
				CODE=#{code, jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				NAME=#{name, jdbcType=VARCHAR},
			</if>
			<if test="shortName != null">
				SHORT_NAME=#{shortName, jdbcType=VARCHAR},
			</if>
			<if test="iconUrl != null">
				ICON_URL=#{iconUrl, jdbcType=VARCHAR},
			</if>
			<if test="startMode != null">
				START_MODE=${startMode},
			</if>
			<if test="executionNum != null">
				EXECUTION_NUM=${executionNum},
			</if>
			<if test="timeLimit != null">
				TIME_LIMIT=${timeLimit},
			</if>
			<if test="description != null">
				DESCRIPTION=#{description, jdbcType=VARCHAR},
			</if>
			<if test="fullId != null">
				FULL_ID=#{fullId, jdbcType=VARCHAR},
			</if>
			<if test="sequence != null">
				SEQUENCE=${sequence},
			</if>
		</set>
		WHERE NODE_DEFINE_ID = #{nodeDefineId}
	</update>

	<update id="updateSequence" parameterType="nodeDefine">
		UPDATE PA_NODE_DEFINE SET SEQUENCE = #{sequence}
		WHERE NODE_DEFINE_ID = #{nodeDefineId}
	</update>

	<update id="move" parameterType="java.util.Map">
		UPDATE PA_NODE_DEFINE SET PARENT_ID = ${parentId},FULL_ID = #{fullId} WHERE NODE_DEFINE_ID = ${nodeDefineId}
	</update>

	<select id="load" parameterType="java.lang.Long" resultType="nodeDefine">
		SELECT NODE_DEFINE_ID as nodeDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId,
		CODE as code, NAME as name, SHORT_NAME as shortName, ICON_URL as iconUrl,
		START_MODE as startMode, EXECUTION_NUM as executionNum, TIME_LIMIT as timeLimit,
		DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence, VERSION
		as version FROM PA_NODE_DEFINE WHERE NODE_DEFINE_ID=#{nodeDefineId}
	</select>

	<select id="queryAll" parameterType="java.util.Map" resultType="nodeDefine">
		SELECT NODE_DEFINE_ID as nodeDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, SHORT_NAME as shortName, ICON_URL as
		iconUrl, START_MODE as startMode, EXECUTION_NUM as executionNum, TIME_LIMIT as timeLimit, DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence,
		VERSION as version FROM PA_NODE_DEFINE
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%',#{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%',#{name}),'%')
			</if>
			<if test="shortName != null">
				AND SHORT_NAME like concat(concat('%',#{shortName}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY SEQUENCE ASC
	</select>

	<select id="slicedQuery" parameterType="java.util.Map" resultType="nodeDefine">
		<!-- SELECT NODE_DEFINE_ID as nodeDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, SHORT_NAME as shortName, ICON_URL as 
			iconUrl, START_MODE as startMode, EXECUTION_NUM as executionNum, TIME_LIMIT as timeLimit, DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence, VERSION 
			as version FROM PA_NODE_DEFINE ORDER BY ${sortname} ${sortorder} OFFSET (${page}-1)*${pagesize} ROWS FETCH NEXT ${pagesize} ROWS ONLY -->
		SELECT NODE_DEFINE_ID as nodeDefineId, NODE_KIND_ID as nodeKindId, PARENT_ID as parentId, CODE as code, NAME as name, SHORT_NAME as shortName, ICON_URL as
		iconUrl, START_MODE as startMode, EXECUTION_NUM as executionNum, TIME_LIMIT as timeLimit, DESCRIPTION as description, FULL_ID as fullId, SEQUENCE as sequence,
		VERSION as version FROM (select t.NODE_DEFINE_ID, t.NODE_KIND_ID, t.PARENT_ID, t.CODE, t.NAME, t.SHORT_NAME, t.ICON_URL, t.START_MODE, t.EXECUTION_NUM, t.TIME_LIMIT, t.DESCRIPTION, t.FULL_ID, t.SEQUENCE, t.VERSION,ROWNUM RN FROM PA_NODE_DEFINE t
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%',#{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%',#{name}),'%')
			</if>
			<if test="shortName != null">
				AND SHORT_NAME like concat(concat('%',#{shortName}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
		</where>
		ORDER BY ${sortname} ${sortorder}
		)
		WHERE RN > (${page}-1)*${pagesize} AND RN &lt;= ${page}*${pagesize}

	</select>

	<select id="getRecordCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT COUNT(0) FROM PA_NODE_DEFINE
		<where>
			<if test="nodeKindId != null and nodeKindId > -1 ">
				AND NODE_KIND_ID = #{nodeKindId}
			</if>
			<if test="parentId != null and parentId > -1 ">
				AND PARENT_ID = #{parentId}
			</if>
			<if test="code != null">
				AND CODE like concat(concat('%',#{code}),'%')
			</if>
			<if test="name != null">
				AND NAME like concat(concat('%',#{name}),'%')
			</if>
			<if test="shortName != null">
				AND SHORT_NAME like concat(concat('%',#{shortName}),'%')
			</if>
			<if test="fullId != null">
				AND FULL_ID like concat(#{fullId},'%')
			</if>
			<if test="fullCode != null">
				AND CODE = #{fullCode}
			</if>
			<if test="nodeDefineId != null and nodeDefineId > 0">
				AND NODE_DEFINE_ID != #{nodeDefineId}
			</if>
		</where>
	</select>

	<select id="getNextSequence" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT NVL(MAX(SEQUENCE),0) + 1 FROM PA_NODE_DEFINE WHERE PARENT_ID = #{parentId}
	</select>

</mapper>