<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brc.pa.projectdata.mapper.NodeDocumentMapper">
	<insert id="insert" parameterType="nodeDocument">
		INSERT INTO PA_NODE_DOCUMENT(NODE_DOCUMENT_ID, DOCUMENT_CLASSIFICATION_ID, SEQUENCE, BIZ_KIND_ID, BIZ_ID, VERSION)
		VALUES(PA_ID_SEQ.nextval,${documentClassificationId}, ${sequence}, ${bizKindId}, ${bizId}, PA_VERSION_SEQ.nextval)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO PA_NODE_DOCUMENT(NODE_DOCUMENT_ID, DOCUMENT_CLASSIFICATION_ID, SEQUENCE, BIZ_KIND_ID, BIZ_ID, VERSION)
		SELECT
		PA_ID_SEQ.nextval,t.*,PA_VERSION_SEQ.nextval FROM (
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			SELECT ${item.documentClassificationId} as DOCUMENT_CLASSIFICATION_ID, ${item.sequence}
			as SEQUENCE, ${item.bizKindId} as BIZ_KIND_ID, ${item.bizId} as BIZ_ID FROM
			DUAL
		</foreach>
		) t
	</insert>


	<delete id="delete" parameterType="java.lang.Long">
		DELETE FROM PA_NODE_DOCUMENT WHERE NODE_DOCUMENT_ID = #{nodeDocumentId}
	</delete>

	<delete id="deleteBatch" parameterType="java.util.List">
		DELETE FROM PA_NODE_DOCUMENT WHERE NODE_DOCUMENT_ID IN
		<foreach collection="list" index="index" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="nodeDocument">
		UPDATE PA_NODE_DOCUMENT
		<set>
			<if test="documentClassificationId != null">
				DOCUMENT_CLASSIFICATION_ID=${documentClassificationId},
			</if>
			<if test="sequence != null">
				SEQUENCE=${sequence},
			</if>
			<if test="bizKindId != null">
				BIZ_KIND_ID=${bizKindId},
			</if>
			<if test="bizId != null">
				BIZ_ID=${bizId},
			</if>
		</set>
		WHERE NODE_DOCUMENT_ID = #{nodeDocumentId}
	</update>

	<update id="updateSequence" parameterType="nodeDocument">
		UPDATE PA_NODE_DOCUMENT SET SEQUENCE = #{sequence}
		WHERE NODE_DOCUMENT_ID = #{nodeDocumentId}
	</update>

	<select id="load" parameterType="java.lang.Long" resultType="nodeDocument">
		SELECT NODE_DOCUMENT_ID as nodeDocumentId, DOCUMENT_CLASSIFICATION_ID as
		documentClassificationId, SEQUENCE as sequence, BIZ_KIND_ID as bizKindId,
		BIZ_ID as bizId, VERSION as version FROM PA_NODE_DOCUMENT WHERE
		NODE_DOCUMENT_ID=#{nodeDocumentId}
	</select>

	<select id="queryAll" parameterType="java.util.Map" resultType="nodeDocument">
		SELECT NODE_DOCUMENT_ID as nodeDocumentId, DOCUMENT_CLASSIFICATION_ID as
		documentClassificationId, SEQUENCE as sequence, BIZ_KIND_ID as bizKindId,
		BIZ_ID as
		bizId, VERSION as version FROM PA_NODE_DOCUMENT
		<where>
			<if test="documentClassificationId != null and documentClassificationId > -1 ">
				AND DOCUMENT_CLASSIFICATION_ID = #{documentClassificationId}
			</if>
			<if test="bizKindId != null and bizKindId > -1 ">
				AND BIZ_KIND_ID = #{bizKindId}
			</if>
			<if test="bizId != null and bizId > -1 ">
				AND BIZ_ID = #{bizId}
			</if>
		</where>
		ORDER BY NODE_DOCUMENT_ID ASC
	</select>

	<select id="slicedQuery" parameterType="java.util.Map" resultType="nodeDocument">
		<!-- SELECT t.NODE_DOCUMENT_ID as nodeDocumentId, t.DOCUMENT_CLASSIFICATION_ID as documentClassificationId, t.SEQUENCE as sequence, t.BIZ_KIND_ID as bizKindId, 
			t.BIZ_ID as bizId, t.VERSION as version , c.CODE as code, c.NAME as name FROM PA_NODE_DOCUMENT t,PA_DOCUMENT_CLASSIFICATION c ORDER BY ${sortname} ${sortorder} OFFSET 
			(${page}-1)*${pagesize} ROWS FETCH NEXT ${pagesize} ROWS ONLY -->
		SELECT NODE_DOCUMENT_ID as nodeDocumentId, DOCUMENT_CLASSIFICATION_ID as documentClassificationId, SEQUENCE as sequence, BIZ_KIND_ID as bizKindId, BIZ_ID as
		bizId, VERSION as version,CODE as code, NAME as name
		FROM (select t.NODE_DOCUMENT_ID, t.DOCUMENT_CLASSIFICATION_ID, t.SEQUENCE, t.BIZ_KIND_ID, t.BIZ_ID, t.VERSION, c.CODE , c.NAME ,ROWNUM RN FROM PA_NODE_DOCUMENT t,PA_DOCUMENT_CLASSIFICATION c
		where t.DOCUMENT_CLASSIFICATION_ID = c.DOCUMENT_CLASSIFICATION_ID
		<if test="documentClassificationId != null and documentClassificationId > -1 ">
			AND t.DOCUMENT_CLASSIFICATION_ID = #{documentClassificationId}
		</if>
		<if test="bizKindId != null and bizKindId > -1 ">
			AND t.BIZ_KIND_ID = #{bizKindId}
		</if>
		<if test="bizId != null and bizId > -1 ">
			AND t.BIZ_ID = #{bizId}
		</if>
		<if test="code != null">
			AND c.CODE like concat(concat('%',#{code}),'%')
		</if>
		<if test="name != null">
			AND c.NAME like concat(concat('%',#{name}),'%')
		</if>
		ORDER BY ${sortname} ${sortorder}
		)
		WHERE RN > (${page}-1)*${pagesize} AND RN &lt;= ${page}*${pagesize}

	</select>

	<select id="getRecordCount" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT COUNT(0) FROM PA_NODE_DOCUMENT t,PA_DOCUMENT_CLASSIFICATION c
		where t.DOCUMENT_CLASSIFICATION_ID = c.DOCUMENT_CLASSIFICATION_ID
		<if test="documentClassificationId != null and documentClassificationId > -1 ">
			AND t.DOCUMENT_CLASSIFICATION_ID = #{documentClassificationId}
		</if>
		<if test="bizKindId != null and bizKindId > -1 ">
			AND t.BIZ_KIND_ID = #{bizKindId}
		</if>
		<if test="bizId != null and bizId > -1 ">
			AND t.BIZ_ID = #{bizId}
		</if>
		<if test="code != null">
			AND c.CODE like concat(concat('%',#{code}),'%')
		</if>
		<if test="name != null">
			AND c.NAME like concat(concat('%',#{name}),'%')
		</if>
	</select>

	<select id="getNextSequence" parameterType="java.util.Map" resultType="java.lang.Long">
		SELECT NVL(MAX(SEQUENCE),0) + 1 FROM PA_NODE_DOCUMENT WHERE BIZ_ID =
		#{bizId} AND
		BIZ_KIND_ID = ${bizKindId}
	</select>

</mapper>